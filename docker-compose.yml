version: "3.9"

services:
  eureka-server:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: eureka-server } }
    container_name: eureka-server
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      SERVER_PORT: "8761"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      EUREKA_INSTANCE_HOSTNAME: eureka-server
    ports: ["8761:8761"]
    restart: unless-stopped

  eureka-hc:
    image: curlimages/curl:8.7.1
    container_name: eureka-hc
    depends_on:
      - eureka-server
    command: ["sh", "-c", "tail -f /dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://eureka-server:8761/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  config-server:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: config-server } }
    container_name: config-server
    environment:
      SPRING_APPLICATION_NAME: config-server
      SERVER_PORT: "8888"

      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: "https://github.com/Maks-Somov/config-properties"
      SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT_LABEL: "main"
      SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCH_PATHS: "{application}"
      SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START: "true"
      SPRING_CLOUD_CONFIG_SERVER_GIT_FORCE_PULL: "true"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    ports: ["8888:8888"]
    depends_on:
      eureka-hc:
        condition: service_healthy
    restart: unless-stopped

  config-hc:
    image: curlimages/curl:8.7.1
    container_name: config-hc
    depends_on:
      - config-server
    command: ["sh", "-c", "tail -f /dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://config-server:8888/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  gateway-api:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: gateway-api } }
    container_name: gateway-api
    environment:
      SPRING_APPLICATION_NAME: gateway-api
      SERVER_PORT: "8080"

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      OTLP_ENDPOINT: "http://otel-collector:4318/v1/traces"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"

      JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=75.0"
    ports: ["8080:8080"]
    depends_on:
      otel-collector:
        condition: service_started
      eureka-hc:
        condition: service_healthy
      config-hc:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: shopdb
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: shop
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U shop -d shopdb || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  product-api:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: product-api } }
    container_name: product-api
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopdb
      SPRING_DATASOURCE_USERNAME: shop
      SPRING_DATASOURCE_PASSWORD: shop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      OTLP_ENDPOINT: "http://otel-collector:4318/v1/traces"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    depends_on:
      otel-collector:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped

  order-api:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: order-api } }
    container_name: order-api
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopdb
      SPRING_DATASOURCE_USERNAME: shop
      SPRING_DATASOURCE_PASSWORD: shop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017
      SPRING_DATA_MONGODB_DATABASE: order-events

      KAFKA_BOOTSTRAP_SERVER: kafka:9092

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
      kafka:
        condition: service_started
    restart: unless-stopped

  order-orchestrator:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: order-orchestrator } }
    container_name: order-orchestrator
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopdb
      SPRING_DATASOURCE_USERNAME: shop
      SPRING_DATASOURCE_PASSWORD: shop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC

      KAFKA_BOOTSTRAP_SERVER: kafka:9092

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped

  inventory-api:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: inventory-api } }
    container_name: inventory-api
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopdb
      SPRING_DATASOURCE_USERNAME: shop
      SPRING_DATASOURCE_PASSWORD: shop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC

      KAFKA_BOOTSTRAP_SERVER: kafka:9092

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped

  payment-api:
    build: { context: ., dockerfile: Dockerfile, args: { MODULE: payment-api } }
    container_name: payment-api
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopdb
      SPRING_DATASOURCE_USERNAME: shop
      SPRING_DATASOURCE_PASSWORD: shop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC

      KAFKA_BOOTSTRAP_SERVER: kafka:9092

      SPRING_CONFIG_IMPORT: "optional:configserver:http://config-server:8888"

      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "15"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "1000"
      SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER: "1.5"
      SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL: "5000"

      eureka.client.service-url.defaultZone: "http://eureka-server:8761/eureka/"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:0.104.0
    command: [ "--config=/etc/otelcol/config.yaml" ]
    volumes:
      - ./otel/config.yaml:/etc/otelcol/config.yaml
    ports:
      - "4318:4318"
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686"
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.2
    environment:
      discovery.type: "single-node"
      ELASTIC_PASSWORD: "changeme"
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fluent-bit
    environment:
      FLUENT_ELASTICSEARCH_HOST: "elasticsearch"
      FLUENT_ELASTICSEARCH_PORT: "9200"
      FLUENT_ELASTICSEARCH_INDEX: "fluent-bit"
      ELASTIC_USER: elastic
      ELASTIC_PASSWORD: changeme
      XPACK_MONITORING_ELASTICSEARCH_USERNAME: elastic
      XPACK_MONITORING_ELASTICSEARCH_PASSWORD: changeme
      XPACK_MONITORING_ELASTICSEARCH_HOSTS: "http://localhost:9200"
      XPACK_MONITORING_ENABLED: true
      FLB_ES_HOST: "elasticsearch"
      FLB_ES_PORT: "9200"
    volumes:
      - /var/log/containers:/var/log/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./elk/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./elk/parsers.conf:/fluent-bit/etc/parsers.conf
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.2
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/bitnami/kafka

  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    #    environment:
    #      - MONGO_INITDB_ROOT_USERNAME=admin
    #      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  es_data:
    driver: local
  pgdata:
  kafka_data:
  mongo_data: